<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (C) 2005 - 2009  Eric Van Dewoestine

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<project name="patch" default="patch" basedir="../..">

  <target name="patch.validate" unless="plugin">
    <fail message="Usage: ant -Dplugin=&lt;plugin-name&gt; patch"/>
  </target>

  <!--
    - Target to patch an eclipse plugin jar.
    -->
  <target name="patch" depends="patch.validate" if="plugin">
    <antcallback target="plugin.resolve" return="plugin_jar, plugin_dir"/>
    <!-- patch jar -->
    <if>
      <not> <equals arg1="" arg2="${plugin_jar}"/> </not>
      <then>
        <echo>Patching plugin: ${plugin_jar}</echo>

        <antcall target="patch.compile"/>

        <!-- backup plugin file if necessary -->
        <if>
          <not><available file="${plugin_jar}.bak"/></not>
          <then>
            <copy file="${plugin_jar}" tofile="${plugin_jar}.bak"/>
          </then>
        </if>

        <jar jarfile="${plugin_jar}" update="true">
          <fileset dir="build/patch/${plugin}/classes">
            <include name="**/*.class"/>
          </fileset>
        </jar>
      </then>
    </if>

    <!-- patch dir -->
    <if>
      <not> <equals arg1="" arg2="${plugin_dir}"/> </not>
      <then>
        <echo>Patching plugin: ${plugin_dir}</echo>

        <antcall target="patch.compile"/>

        <!-- backup plugin dir if necessary -->
        <basename file="${plugin_dir}" property="plugin_dir.name"/>
        <if>
          <not>
            <available file="${eclipse.home}/patch.backup/${plugin_dir.name}"/>
          </not>
          <then>
            <mkdir dir="${eclipse.home}/patch.backup"/>
            <exec executable="cp" failonerror="true">
              <arg line="-pr ${plugin_dir} ${eclipse.home}/patch.backup/"/>
            </exec>
          </then>
        </if>

        <copy todir="${plugin_dir}">
          <fileset dir="build/patch/${plugin}/classes">
            <include name="**/*.class"/>
          </fileset>
        </copy>
      </then>
    </if>
  </target>

  <target name="patch.compile.validate" unless="plugin">
    <fail message="Usage: ant -Dplugin=&lt;plugin-name&gt; patch.compile"/>
  </target>

  <!--
    - Task to just compile the patch sources.
    -->
  <target name="patch.compile" depends="patch.validate" if="plugin">
    <mkdir dir="build/patch/${plugin}/classes"/>
    <javac destdir="build/patch/${plugin}/classes"
        debug="on" optimize="false"
        target="1.5" source="1.5"
        deprecation="${deprecation}">
      <src path="src/patch/${plugin}"/>
      <include name="**/*.java"/>
      <classpath>
        <path refid="classpath"/>
        <pathelement path="${build.classes}"/>
      </classpath>
    </javac>
  </target>

  <!--
    - Task to run patch for all plugin patches available.
    -->
  <target name="patch.all">
    <antcallback target="plugin.names.resolve" return="plugin_names"/>
    <foreach list="${plugin_names}" delimiter=":"
        target="patch" param="plugin"/>
  </target>

  <target name="patch.revert.validate" unless="plugin">
    <fail message="Usage: ant -Dplugin=&lt;plugin-name&gt; patch.revert"/>
  </target>

  <!--
    - Target to revert a patched jar to its original version.
    -->
  <target name="patch.revert">
    <antcallback target="plugin.resolve" return="plugin_jar, plugin_dir"/>

    <!-- revert plugin jar -->
    <if>
      <and>
        <not> <equals arg1="" arg2="${plugin_jar}"/> </not>
        <available file="${plugin_jar}.bak"/>
      </and>
      <then>
        <echo>Reverting patch for plugin: ${plugin_jar}</echo>
        <move file="${plugin_jar}.bak" tofile="${plugin_jar}"/>
      </then>
    </if>

    <!-- revert plugin dir -->
    <basename file="${plugin_dir}" property="plugin_dir.name"/>
    <if>
      <and>
        <not> <equals arg1="" arg2="${plugin_dir}"/> </not>
        <available file="${eclipse.home}/patch.backup/${plugin_dir.name}"/>
      </and>
      <then>
        <echo>Reverting patch for plugin: ${plugin_dir}</echo>
        <exec executable="rm" failonerror="true">
          <arg line="-r ${plugin_dir}"/>
        </exec>
        <exec executable="mv" failonerror="true">
          <arg line="${eclipse.home}/patch.backup/${plugin_dir.name} ${plugin_dir}"/>
        </exec>
      </then>
    </if>

    <delete dir="build/patch/${plugin}/classes"/>
  </target>

  <!--
    - Task to run patch for all plugin patches available.
    -->
  <target name="patch.revert.all">
    <antcallback target="plugin.names.resolve" return="plugin_names"/>
    <foreach list="${plugin_names}" delimiter=":"
        target="patch.revert" param="plugin"/>
  </target>

  <!--
    - Target which resolves the location of the plugin jar file.
    -->
  <target name="plugin.resolve">
    <path id="plugin_jar">
      <fileset dir="${eclipse.home}">
        <include name="plugins/${plugin}_*.jar"/>
        <include name="dropins/**/plugins/${plugin}_*.jar"/>
      </fileset>
    </path>
    <property name="plugin_jar" refid="plugin_jar"/>

    <path id="plugin_dir">
      <dirset dir="${eclipse.home}">
        <include name="plugins/${plugin}_*"/>
        <include name="dropins/**/plugins/${plugin}_*"/>
      </dirset>
    </path>
    <property name="plugin_dir" refid="plugin_dir"/>

    <if>
      <and>
        <or>
          <equals arg1="" arg2="${plugin_jar}"/>
          <not><available file="${plugin_jar}"/></not>
        </or>
        <or>
          <equals arg1="" arg2="${plugin_dir}"/>
          <not><available file="${plugin_dir}"/></not>
        </or>
      </and>
      <then>
        <fail>
          No plugin jar file or dir found for '${plugin}' in '${eclipse.home}'.
        </fail>
      </then>
    </if>
  </target>

  <!--
    - Target which resolves all plugin patch names.
    -->
  <target name="plugin.names.resolve">
    <path id="plugin_names">
      <dirset dir="src/patch" includes="*"/>
    </path>
    <property name="plugin_names" refid="plugin_names"/>
    <if>
      <equals arg1="" arg2="${plugin_names}"/>
      <then>
        <fail>No plugin patch directories found.</fail>
      </then>
    </if>
    <propertyregex property="plugin_names" override="true"
        input="${plugin_names}" regexp=".*?/([a-zA-Z0-9.]*(:|$))" replace="\1"/>
  </target>

</project>
